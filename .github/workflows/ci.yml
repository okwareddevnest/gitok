name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Bash
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Validate shell scripts
      run: |
        echo "üîç Running ShellCheck on scripts..."
        shellcheck .gitok.sh
        shellcheck install.sh
        echo "‚úÖ Shell scripts validation passed"
        
    - name: Test installation script
      run: |
        echo "üß™ Testing installation script..."
        bash -n install.sh
        echo "‚úÖ Installation script syntax check passed"
        
    - name: Test gitok functions
      run: |
        echo "üß™ Testing gitok functions..."
        source .gitok.sh
        echo "Testing version command..."
        gitok --version
        echo "‚úÖ Basic functionality test passed"


  version-and-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[release]'))
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true
        
    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global init.defaultBranch main
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(cat VERSION)
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Bump version
      id: bump_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
        BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
        
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "$NEW_VERSION" > VERSION
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Update version in script
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        sed -i "s/GITOK_VERSION=\".*\"/GITOK_VERSION=\"$NEW_VERSION\"/" .gitok.sh
        echo "Updated version in .gitok.sh to $NEW_VERSION"
        
    - name: Generate dynamic changelog
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        chmod +x scripts/generate-changelog.sh
        ./scripts/generate-changelog.sh changelog "$NEW_VERSION"
        echo "Generated changelog for v$NEW_VERSION"
        
    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        git add VERSION .gitok.sh CHANGELOG.md
        git commit -m "üîñ Bump version to v$NEW_VERSION

        - Updated version in core script
        - Auto-generated changelog from commits
        - Ready for release"
        
        # Create tag
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push changes and tag
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Generate dynamic release notes
      id: release_notes
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        
        # Get the previous version for comparison
        PREV_VERSION=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null | sed 's/^v//' || echo "1.0.0")
        echo "Previous version: $PREV_VERSION"
        echo "New version: $NEW_VERSION"
        
        # Get commits since last version
        if git rev-parse "v$PREV_VERSION" >/dev/null 2>&1; then
          COMMITS=$(git log --oneline "v$PREV_VERSION"..HEAD --pretty=format:"- %s" | head -20)
        else
          COMMITS=$(git log --oneline -10 --pretty=format:"- %s")
        fi
        
        # Generate dynamic release notes
        cat > release_notes.md << EOF
        # üöÄ GitOK v$NEW_VERSION - Git CLI Productivity Boost
        
        GitOK supercharges your Git workflow with 35+ custom commands and aliases designed to make Git operations faster and more intuitive.
        
        ## üåü What's New in v$NEW_VERSION
        
        ### üìù Changes in this release:
        $COMMITS
        
        ### üîß Key Improvements:
        - Enhanced GitHub Actions workflow with integrated release creation
        - Improved update mechanism with better fallback handling for API rate limits
        - Modern GitHub Actions integration using softprops/action-gh-release
        - Streamlined CI/CD pipeline for automated releases
        
        ## üì¶ Installation
        
        ### üêß Linux & macOS
        \`\`\`bash
        bash <(curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh)
        \`\`\`
        
        ### ü™ü Windows Users
        
        **Option 1: WSL (Recommended)**
        \`\`\`powershell
        wsl bash -c "curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh | bash"
        \`\`\`
        
        **Option 2: Git Bash**
        \`\`\`bash
        bash <(curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh)
        \`\`\`
        
        **Option 3: PowerShell (Run as Administrator)**
        \`\`\`powershell
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/okwareddevnest/gitok/main/install-windows.ps1'))
        \`\`\`
        
        ## ‚úÖ Verify Installation
        \`\`\`bash
        # Restart your terminal or run:
        source ~/.bashrc  # or source ~/.zshrc
        
        # Test installation
        gitok --version
        gitcheatsheet
        \`\`\`
        
        ## üîÑ Updates
        \`\`\`bash
        # Auto-update to latest version
        gitok --update
        
        # Check current version
        gitok --version
        \`\`\`
        
        ## üöÄ 35+ Git Commands Available
        
        ### üîß Core Operations
        - \`commit "message"\` - Stage all and commit
        - \`push\` / \`pushall\` - Push to remote(s)
        - \`pull\` - Pull with rebase
        - \`status\` - Enhanced git status
        
        ### üåø Branch Management
        - \`branch <name>\` - Create and switch
        - \`checkout <name>\` - Switch branches
        - \`branches\` - List all branches
        - \`deletebranch <name>\` - Safe deletion
        
        ### üìà Advanced Features
        - \`unpush\` - Undo last push (with confirmation)
        - \`squashlast [N]\` - Squash commits
        - \`graphlog\` - Visual commit history
        - \`gitcheatsheet\` - Interactive help
        
        ## üîß Technical Features
        - **Cross-platform support** (Linux, macOS, Windows)
        - **Automatic shell detection** (bash, zsh, fish)
        - **Auto-update system** with GitHub API integration
        - **Safety confirmations** for destructive operations
        - **Comprehensive error handling** and fallback mechanisms
        
        ## üìö Links
        - **Repository**: https://github.com/okwareddevnest/gitok
        - **Issues**: https://github.com/okwareddevnest/gitok/issues
        - **Install Guide**: See installation options above
        
        ---
        
        **‚≠ê Star this repo if GitOK boosts your Git productivity!**
        
        Created with ‚ù§Ô∏è by **Dedan Okware**
        EOF
        
        # Set output for GitHub Actions
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        cat release_notes.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new }}
        name: "üöÄ GitOK v${{ steps.bump_version.outputs.new }} - Git CLI Productivity Boost"
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "üîí Running basic security checks..."
        # Check for common security issues in shell scripts
        grep -r "eval\|exec\|system" . --include="*.sh" || echo "No dangerous functions found"
        echo "‚úÖ Security scan completed"