name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Bash
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Validate shell scripts
      run: |
        echo "üîç Running ShellCheck on scripts..."
        shellcheck .gitok.sh
        shellcheck install.sh
        echo "‚úÖ Shell scripts validation passed"
        
    - name: Test installation script
      run: |
        echo "üß™ Testing installation script..."
        bash -n install.sh
        echo "‚úÖ Installation script syntax check passed"
        
    - name: Test gitok functions
      run: |
        echo "üß™ Testing gitok functions..."
        source .gitok.sh
        echo "Testing version command..."
        gitok --version
        echo "‚úÖ Basic functionality test passed"


  version-and-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[release]'))
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true
        
    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global init.defaultBranch main
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(cat VERSION)
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Bump version
      id: bump_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
        BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
        
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "$NEW_VERSION" > VERSION
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Update version in script
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        sed -i "s/GITOK_VERSION=\".*\"/GITOK_VERSION=\"$NEW_VERSION\"/" .gitok.sh
        echo "Updated version in .gitok.sh to $NEW_VERSION"
        
    - name: Generate dynamic changelog
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        chmod +x scripts/generate-changelog.sh
        ./scripts/generate-changelog.sh changelog "$NEW_VERSION"
        echo "Generated changelog for v$NEW_VERSION"
        
    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        git add VERSION .gitok.sh CHANGELOG.md
        git commit -m "üîñ Bump version to v$NEW_VERSION

        - Updated version in core script
        - Auto-generated changelog from commits
        - Ready for release"
        
        # Create tag
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push changes and tag
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        
        # Create comprehensive release notes
        cat > release_notes.md << 'EOF'
        # üöÄ Gitok v$NEW_VERSION - Git CLI Productivity Boost
        
        Gitok supercharges your Git workflow with 35+ custom commands and aliases designed to make Git operations faster and more intuitive.
        
        ## ‚ú® Key Features
        
        ### üîß Core Git Operations
        - **`commit "message"`** - Stage all changes and commit with message
        - **`push`** - Push to current branch with safety checks
        - **`pushall`** - Push to all configured remotes with rebase
        - **`pull`** - Pull with automatic rebase
        - **`status`** - Enhanced git status display
        
        ### üåø Branch Management
        - **`branch <name>`** - Create and switch to new branch
        - **`checkout <name>`** - Switch to existing branch
        - **`branches`** - List all branches with details
        - **`deletebranch <name>`** - Safely delete branch
        
        ### üìà Advanced Features
        - **`unpush`** - Safely undo last push (with confirmation)
        - **`squashlast [N]`** - Squash last N commits
        - **`graphlog`** - Beautiful commit history visualization
        - **`makeignore <type>`** - Generate .gitignore templates
        
        ### üõ†Ô∏è Productivity Tools
        - **`gitcheatsheet`** - Interactive command reference
        - **`gitok --update`** - Auto-update to latest version
        - **`gitok --version`** - Show version information
        - **Safety confirmations** for destructive operations
        
        ## üì¶ Installation
        
        ### üêß Linux & macOS
        ```bash
        bash <(curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh)
        ```
        
        ### ü™ü Windows Users
        
        **Option 1: WSL (Recommended)**
        ```powershell
        wsl bash -c "curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh | bash"
        ```
        
        **Option 2: Git Bash**
        ```bash
        bash <(curl -sL https://raw.githubusercontent.com/okwareddevnest/gitok/main/install.sh)
        ```
        
        **Option 3: PowerShell (Run as Administrator)**
        ```powershell
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/okwareddevnest/gitok/main/install-windows.ps1'))
        ```
        
        **Option 4: Download & Run Batch File**
        Download: [install-windows.bat](https://raw.githubusercontent.com/okwareddevnest/gitok/main/install-windows.bat)
        
        ## ‚úÖ Verify Installation
        ```bash
        # Restart your terminal or run:
        source ~/.bashrc  # or source ~/.zshrc
        
        # Test installation
        gitok --version
        gitcheatsheet
        ```
        
        ## üîÑ Updates
        ```bash
        # Auto-update to latest version
        gitok --update
        
        # Check current version
        gitok --version
        ```
        
        ## üöÄ Quick Start
        ```bash
        # Initialize repo and make first commit
        init
        commit "Initial commit"
        
        # Create feature branch
        branch feature/awesome-feature
        commit "Add awesome feature"
        
        # Push to all remotes
        pushall
        
        # View commit history
        graphlog
        
        # See all commands
        gitcheatsheet
        ```
        
        ## üìã Complete Command List
        
        ### Repository Management
        - `init` - Initialize Git repository
        - `clone <url>` - Clone repository
        - `status` - Show repository status
        
        ### Staging & Commits
        - `addall` - Stage all changes
        - `commit "message"` - Stage all and commit
        - `commitonly "message"` - Commit staged changes only
        - `amendmsg "message"` - Amend last commit message
        
        ### Push & Pull Operations
        - `push` - Push current branch
        - `pushall` - Push to all remotes
        - `pushnew` - Push new branch to remote
        - `pull` - Pull with rebase
        - `unpush` - Undo last push (‚ö†Ô∏è destructive)
        - `trackremote` - Set upstream tracking
        
        ### Branch Operations
        - `branch <name>` - Create and switch to branch
        - `checkout <name>` - Switch to branch
        - `branches` - List all branches
        - `deletebranch <name>` - Delete branch safely
        - `deletebranchf <name>` - Force delete branch
        
        ### History & Logs
        - `graphlog` - Graphical commit history
        - `last` - Show last commit
        - `logfull` - Detailed commit history
        - `diff` - Show changes
        
        ### Undo & Reset
        - `resetsoft` - Soft reset to last commit
        - `resethard` - Hard reset to last commit
        - `revertlast` - Revert last commit
        - `unstage` - Unstage changes
        - `restore <file>` - Restore file
        
        ### Stash Operations
        - `stash` - Stash current changes
        - `pop` - Pop latest stash
        
        ### Cleanup & Tools
        - `clean` - Clean untracked files
        - `tracked` - Show tracked files
        - `remotes` - Show remote repositories
        - `squashlast [N]` - Squash last N commits
        
        ### File Management
        - `ignore <pattern>` - Add to .gitignore
        - `makeignore <type>` - Generate .gitignore template
        
        ### Help & Information
        - `gitcheatsheet` - Interactive command reference
        - `gitok --help` - Show help
        - `gitok --version` - Show version
        - `gitok --update` - Update to latest version
        
        ## üîß Technical Features
        - **Cross-platform support** (Linux, macOS, Windows)
        - **Automatic shell detection** (bash, zsh, fish)
        - **Intelligent installation** with profile configuration
        - **Auto-update system** with GitHub API integration
        - **Safety confirmations** for destructive operations
        - **Colorized output** for better readability
        - **CI/CD integration** with automated testing
        
        ## üõ°Ô∏è Safety Features
        - Confirmation prompts for destructive operations
        - Automatic backups before major changes
        - Dry-run options for testing commands
        - Comprehensive error handling
        
        ## üìö Documentation
        - **Repository**: https://github.com/okwareddevnest/gitok
        - **Issues**: https://github.com/okwareddevnest/gitok/issues
        - **Contributing**: See CONTRIBUTING.md
        
        ## ü§ù Support
        - üìß Email: softengdedan@gmail.com
        - üêõ Issues: https://github.com/okwareddevnest/gitok/issues
        - üí¨ Discussions: https://github.com/okwareddevnest/gitok/discussions
        
        ---
        
        **‚≠ê Star this repo if Gitok boosts your Git productivity!**
        
        Created with ‚ù§Ô∏è by **Dedan Okware**
        EOF
        
        # Replace version placeholders
        sed -i "s/\$NEW_VERSION/$NEW_VERSION/g" release_notes.md
        
        # Set output for GitHub Actions
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        cat release_notes.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new }}
        name: "üöÄ Gitok v${{ steps.bump_version.outputs.new }} - Git CLI Productivity Boost"
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "üîí Running basic security checks..."
        # Check for common security issues in shell scripts
        grep -r "eval\|exec\|system" . --include="*.sh" || echo "No dangerous functions found"
        echo "‚úÖ Security scan completed"